package ethanp.experiments;import ethanp.jettyTrials.HttpsServer;import org.apache.commons.io.IOUtils;import org.eclipse.jetty.alpn.ALPN;import org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory;import org.eclipse.jetty.http.HttpVersion;import org.eclipse.jetty.http2.HTTP2Cipher;import org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory;import org.eclipse.jetty.server.HttpConfiguration;import org.eclipse.jetty.server.HttpConnectionFactory;import org.eclipse.jetty.server.SecureRequestCustomizer;import org.eclipse.jetty.server.Server;import org.eclipse.jetty.server.ServerConnector;import org.eclipse.jetty.server.SslConnectionFactory;import org.eclipse.jetty.servlet.ServletContextHandler;import org.eclipse.jetty.servlet.ServletHolder;import org.eclipse.jetty.util.ssl.SslContextFactory;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.nio.file.Files;import java.nio.file.Path;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * Ethan Petuchowski 10/23/15 * * Special thanks to fstab for: github.com/fstab/http2-examples/blob/master/jetty-http2-echo-server/src/main/java/de/consol/labs/h2c/Http2EchoServer.java * except updated to work with Jetty 9.3 or whatever this is. */public class Http2EchoServer {    static class TheServlet extends HttpServlet {        static final String str = "tile(\\d{2})";        static final Pattern p = Pattern.compile(str);        @Override        protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException {            System.out.println(request.getProtocol()+" "+request.getRequestURI());            if (request.getRequestURI().contains("/tiles")) {                Matcher m = p.matcher(request.getRequestURI());                if (!m.find()) System.err.println("well that's odd...");                response.setContentType("image/jpg");                String imagePath = "target/classes/docroot/tiles/"+m.group()+".jpg";                Path img = new File(imagePath).toPath();                byte[] imgBytes = Files.readAllBytes(img);                response.getOutputStream().write(imgBytes);            }            else {                response.setContentType("text/html");                try (InputStream in = this                    .getClass()                    .getClassLoader()                    .getResourceAsStream("docroot/index.html")) {                    IOUtils.copy(in, response.getWriter());                }            }        }    }    private static SslContextFactory configureSsl() {        SslContextFactory sslContextFactory = new SslContextFactory();        sslContextFactory.setKeyStorePath(HttpsServer.keystoreFile.getAbsolutePath());        sslContextFactory.setKeyStorePassword(HttpsServer.PASSWORD);        sslContextFactory.setKeyManagerPassword(HttpsServer.PASSWORD);        sslContextFactory.setCipherComparator(HTTP2Cipher.COMPARATOR);        return sslContextFactory;    }    private static SslConnectionFactory sslForProtocol(String protocol) {        return new SslConnectionFactory(configureSsl(), protocol);    }    public static void main(String... args) throws Exception {        Server server = new Server();        ServletContextHandler context = new ServletContextHandler(server, "/", ServletContextHandler.SESSIONS);        context.addServlet(new ServletHolder(new TheServlet()), "/");        server.setHandler(context);        // HTTPS Configuration        HttpConfiguration httpsConfig = new HttpConfiguration();        httpsConfig.addCustomizer(new SecureRequestCustomizer());        httpsConfig.setOutputBufferSize(32768);        // HTTP/2 Connection Factory        HTTP2ServerConnectionFactory http2Factory = new HTTP2ServerConnectionFactory(httpsConfig);        ALPNServerConnectionFactory alpn = new ALPNServerConnectionFactory();        alpn.setDefaultProtocol("h2");        // SSL Connection Factory        SslConnectionFactory h2sslFactory = sslForProtocol(alpn.getProtocol());        SslConnectionFactory h1sslFactory = sslForProtocol(HttpVersion.HTTP_1_1.asString());        HttpConnectionFactory httpFactory = new HttpConnectionFactory(httpsConfig);        // HTTP/2 Connector (this simply seems to work; that's all I know for sure)        ServerConnector https2Connector = new ServerConnector(server, h2sslFactory, alpn, http2Factory);        https2Connector.setPort(8443);        https2Connector.setIdleTimeout(500000);        server.addConnector(https2Connector);        /* Now we can create the HTTPS ServerConnector */        ServerConnector https1Connector = new ServerConnector(server, h1sslFactory, httpFactory);        https1Connector.setPort(8444);        https1Connector.setIdleTimeout(500000);        server.addConnector(https1Connector);        ALPN.debug = true;        server.start();        server.join();    }}